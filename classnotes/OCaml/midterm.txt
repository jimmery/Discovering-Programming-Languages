Midterm Exam

topics:

OCaml/functional programming
  - recursion
  - pattern matching
  - higher-order functions
    - map, filter, fold_right/left
  - exceptions
  - datatypes
  - modules and module types

Concepts:
  - static vs. dynamic scoping
  - static vs. dynamic typechecking
  - strong vs. weak typechecking
  - parametric polymorphism vs. static overloading

Parametric polymorphism:

the type of a function includes one or more *type variables*
 - caller gets to choose what types to instantiate the
   type variables with
 - allows more code to typecheck
   - one piece of code that can be passed arguments of 
     all possible types

# let id = (function x -> x)
val id : 'a -> 'a

(id 3) : int
(id false) : bool


Static overloading:

many different functions that all have the same name
+ for ints, + for floats, + for strings

3+4  (compiler figures out that you want + for integers)

"hi" + "bye" (compiler figures out that you want + for strings)


Scoping:

static (or lexical) scoping: 
  - you can determine the variable declaration associated with
    each variable use at compile time
  - every variable use is referring to the nearest lexically 
    enclosing declaration of that variable

  let x = 3 in
  let y = 4 in 
    y + (let x = 5 in x) + x

 
  let f = (let x = 3 in function y -> y+x) in
  let x = 0 in
  f 2


Strong vs. weak typechecking

strongly typed means that a program never gets into an undefined state
  - either rejected at compile time
  - or get a run-time exception before something bad happens

weakly typed means that a program can get into an undefined state

key issue: memory safety / ruling out memory errors
 - most languages prevent memory errors
 







