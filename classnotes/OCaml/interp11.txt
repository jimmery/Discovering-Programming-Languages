
# 
# 3+5;;
- : int = 8

(* Variable declarations with "let" *)

# let x = 3+5;;
val x : int = 8

# x + 34;;
- : int = 42

# let y = x * x;;
val y : int = 64

(* The "function" expression creates a new function *)

# let double = (function x -> x * 2);;
val double : int -> int = <fun>

# double "hello";;
Error: This expression has type string but an expression was expected of type
         int

# double 34;;
- : int = 68

# (double 34);;
- : int = 68

# double(34);;
- : int = 68

# let quadruple = (function v -> (double v) + (double v));;
val quadruple : int -> int = <fun>

# quadruple 23;;
- : int = 92

(* You can *shadow* an old variable with a new one of the same name,
   but this does not modify the old one. *)

# let double = (function x -> x * 3);;
val double : int -> int = <fun>

# quadruple 23;;
- : int = 92

# double 4;;
- : int = 12

# x;;
- : int = 8

# let f = (function v -> v + x);;
val f : int -> int = <fun>

# f 12;;
- : int = 20

# x;;
- : int = 8

# let x = 0;;
val x : int = 0

# f 12;;
- : int = 20

# let x = "bye";;
val x : string = "bye"

# f 12;;
- : int = 20

(* Recursive functions *)

# let rec factorial =
    function n -> 
      if n=0 then 1 else n * factorial (n-1);;
val factorial : int -> int = <fun>
# factorial 5;;
- : int = 120

(* Pattern matching *)

# let rec fact =
    function n ->
      match n with
        0 -> 1
      | _ -> n * fact (n-1);;
val fact : int -> int = <fun>
# fact 5;;
- : int = 120
#

# let f = function x ->
            match x with 
              0 -> 1
  ;;
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
1
val f : int -> int = <fun>
# f 1;;
Exception: Match_failure ("//toplevel//", 9, 10).
# 

# let rec isEven = (function n -> 
                      match n with 
                       0 -> true
                     | 1 -> false
                     | _ -> isEven (n-2));;
val isEven : int -> bool = <fun>
# isEven 4;;
- : bool = true
# isEven 5;;
- : bool = false
# isEven (-1);;
Interrupted.
# ^D

(* Lists *)

# 
# [1;2;3];;
- : int list = [1; 2; 3]
# 1::(2::(3::[]));;
- : int list = [1; 2; 3]

# #use "example.ml";;
val isEven : int -> bool = <fun>
val isEven2 : int -> bool = <fun>
val sumLst : int list -> int = <fun>
# sumLst [1;2;3;4];;
- : int = 10

# everyOther [1;2;3;4];;
- : int list = [1; 3]
# everyOther ["one"; "two"; "three"];;
- : string list = ["one"; "three"]
# [1;2;"three"];;
Error: This expression has type string but an expression was expected of type
         int

# let equalToItself x = x=x;;
val equalToItself : 'a -> bool = <fun>
# equalToItself 34;;
- : bool = true
# equalToItself "hi";;
- : bool = true
# 
